============================================================
CHUNKING COMPARISON RESULTS
============================================================

=� METHOD COMPARISON:
RecursiveCharacterTextSplitter:
  - Chunks: 25
  - Avg size: 599 chars
  - Build time: 10.41s

SemanticChunker:
  - Chunks: 10
  - Avg size: 1481 chars
  - Build time: 7.11s

=� PERFORMANCE ANALYSIS:
  - Chunk reduction: 60.0% (semantic vs recursive)
  - Context preservation: BETTER
  - Build time overhead: -3.3s

=QUERY TEST RESULTS:
Query: 'Cara return barang rusak?'
  Recursive: 3 docs, 530 avg chars
  Semantic:  3 docs, 1658 avg chars
  Winner: SEMANTIC

Query: 'Customer service contact info?'
  Recursive: 3 docs, 591 avg chars
  Semantic:  3 docs, 1756 avg chars
  Winner: SEMANTIC

Query: 'App error troubleshooting?'
  Recursive: 3 docs, 642 avg chars
  Semantic:  3 docs, 1983 avg chars
  Winner: SEMANTIC

Query: 'Refund policy details?'
  Recursive: 3 docs, 530 avg chars
  Semantic:  3 docs, 1658 avg chars
  Winner: SEMANTIC

Query: 'Prosedur eskalasi komplain?'
  Recursive: 3 docs, 649 avg chars
  Semantic:  3 docs, 474 avg chars
  Winner: RECURSIVE

<� OVERALL ANALYSIS:
  - Recursive wins: 1
  - Semantic wins: 4
  - Ties: 0
  - Overall winner: SEMANTIC

=� RECOMMENDATION:
  SemanticChunker - Better context preservation with fewer chunks

============================================================